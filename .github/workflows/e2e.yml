name: "Run SAST, Build and push Vulnerable node image, scan image, N Update deployment and version txt"
 
on:
  push:
    branches:
      - main
 
env:
  VERSION: $(( $(cat version.txt) + 1 ))
  
jobs:
 
  sonarqube_sast_scan:
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
 
      - name: SonarQube Scan
        uses:  SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
       
          args:
             # mandatory
            -Dsonar.projectKey=joeblaze1216_Vulnerable-Docker
            -Dsonar.organization=joeblaze1216
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - name: SonarQube Quality Gate Check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  synk_scan:
    runs-on: ubuntu-latest
    needs: sonarqube_sast_scan
    name: Run the SCA scan on the source code 1
    steps:
      - uses: actions/checkout@master
      - name: RunSnyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
   
          
          


  build_push_vulnerable_docker_image:
    runs-on: ubuntu-latest
    needs: synk_scan
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
  
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
 
      - name: Build and Push Docker Image
        run: |
          docker build -t puthurjohnny/vulnerablerepos:${{ env.VERSION }} .
          docker push puthurjohnny/vulnerablerepos:${{ env.VERSION }}
 
  run_container_image_scan_on_vulnerable_docker_image:
    runs-on: ubuntu-latest
    needs: build_push_vulnerable_docker_image	
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
 
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Get Docker Image from Docker Hub
        run: |
          docker pull puthurjohnny/vulnerablerepos:${{ env.VERSION }}
          docker save -o ${{ github.workspace }}/vulnerabledockerimage.tar docker.io/puthurjohnny/vulnerablerepos:${{ env.VERSION }}     
         
      - name: Run Trivy vulnerability scanner in tarball mode
        uses: aquasecurity/trivy-action@master
        with:
          input: ${{ github.workspace }}/vulnerabledockerimage.tar
          exit-code: '0'
          severity: 'CRITICAL,HIGH,LOW'
          
  update_k8s_yaml_version_file_with_latest_image_tag:
    runs-on: ubuntu-latest
    needs: run_container_image_scan_on_vulnerable_docker_image
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
 
      - name: Set Git Config
        run: |
           git config --global user.email "${{ secrets.GIT_EMAIL}}"
           git config --global user.name "${{ secrets.GIT_USERNAME}}"
 
      - name: Update Deployment YAML
        run: |
          git pull
          sed -i "s|image: puthurjohnny/vulnerablerepos:.*$|image: puthurjohnny/vulnerablerepos:${{ env.VERSION }}|" k8s/deployment.yml
          echo ${{ env.VERSION }} > version.txt
          CURRENT_VERSION=$(cat version.txt)
          git add k8s/deployment.yml version.txt
          git commit -m "Updated deployment yaml and version txt file with vulnerable image tag to ${CURRENT_VERSION}"
          git push
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}